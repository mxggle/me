{"pages":[{"title":"","text":"一个前端工程师 最近在写React-native,对Python有兴趣,这是我的Github 热衷于科学上网，这是我最近用的机场 可以关注一下我的Twitter 喜欢摄影，入了尼康坑可以关注一下我的Instagram 喜欢看美剧推荐一波 权力的游戏 Game Of Trones 怪奇物语 Stranger Things 越狱 Prison Break 迷失 Lost 绝命毒师 Break Bad 无耻之徒 Shameless 哥谭镇 Gotham 当然还有 硅谷 Silicon Valley 关于博客就是记录一下自己学到的，想分享的东西。我说的分享可能更多的不是指分享给别人看，是分享给未来的我自己看（当然如果有人看并且从我这里得到点什么我也是很开心的）。我想知道十年后我打开自己的博客网站，看自己的文字，会觉得自己的现在是什么样的一个人？处于一个什么样的阶段？行业技术处于什么样的阶段？还能否听懂我所分享的东西？我也希望一直坚持下去，这样也能看到我的成长。","link":"/about/index.html"}],"posts":[{"title":"我的终端快捷命令配置技巧","text":"这篇文章和把敲代码过程中的琐碎操作交给肌肉记忆这篇文章类似，分享一下我提高效率的技巧，不能说这些技巧大幅度提高了我的开发效率，但至少在完成琐碎操作的时候不至于那么蛋疼。 我用的终端app是iTerm2，如果你是程序员，并且用的是Mac，那么iTerm2应该是你的首选吧。这里就不介绍它了。iTerm2的配置文件路径（其他终端自己找对应配置文件）1~/.zshrc 我常用的快捷命令配置主要是两种： alias 脚本函数 我的alias配置如下 1234567891011121314151617181920 # 快捷命令alias cls='clear'alias ll='ls -l'alias la='ls -a'alias vi='vim'alias dma='docker-machine'alias py='python3'alias rn='react-native'alias rna='react-native run-android'alias gitcgmuggle='git config --local user.name muggle &amp;&amp; git config --local user.email muggle6594@gmail.com'# App安装开关任何涞源alias anywhereon='sudo spctl --master-disable'alias anywhereoff='sudo spctl --master-enable'# 快捷进入目录alias pj='cd ~/Work/projects'alias rt='cd ~/Work/test/react'alias blog='cd ~/Work/projects/myblog'# serversalias vps='/Users/szy/myshells/myvps.sh' 上面的vpsalias是我原来用来科学上网的服务器，这里我是引入了外部的脚本文件，毕竟直接明文写了密码啥的，脚本文件是这样的： 12345678910111213 #!/usr/bin/expect -fset user rootset host **.**.**.**set port ***set password **************set timeout -1spawn ssh $user@$host -p $portexpect \"*password:*\"send \"$password\\r\"interactexpect eof 我的脚本函数配置如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546# 关闭终端代理function proxyoff()&#123; unset http_proxy unset https_proxy unset all_proxy curl ip.gs echo -e \"已关闭代理\"&#125;# 开启终端代理function proxyon() &#123; export https_proxy=http://127.0.0.1:7890; export http_proxy=http://127.0.0.1:7890; export all_proxy=socks5://127.0.0.1:7891 env | grep -i proxy curl ip.gs echo -e \"已开启代理\"&#125;# 开启端口转发function ptfon()&#123; echo \" rdr pass inet proto tcp from any to any port 80 -&gt; 127.0.0.1 port $1\" | sudo pfctl -ef - if [ $? -ne 0 ] then echo \"端口未转发\" else echo \"👉 已将 $1 端口转发至 80\" fi &#125;# 关闭端口转发function ptfoff()&#123; sudo pfctl -F all -f /etc/pf.conf portf_list echo \"👉 已取消端口转发\"&#125;function ptfls()&#123; sudo pfctl -s nat&#125;function rni()&#123; # xcrun simctl list devices if \"$1\" then react-native run-ios --simulator 'iPhone 7 Plus' else react-native run-ios fi&#125; 我上面的一些配置都是我经常使用的一些。脚本函数那一块，存在错误和不完善的地方，但我不打算去修正它，无关紧要，能用就成。我在配置快捷命令的时候也有一个原则，就是偷可以偷的懒，作为一个程序员，很多命令肯定需要熟记在心的，不能有了这个偷懒的方法，就把所有的命令都给配置成了快捷命令，可能配置完后用的时候爽了，但如果换了台电脑。。。或者某一天公司服务器服务突然崩了，你连接上服务器才发现自己只会打快捷命令。。。。 最后，如果你其他快捷配置，或者其他玩法，请务必分享给我。","link":"/2019/10/19/我的终端快捷命令配置技巧/"},{"title":"小知识点 - 我理解的javascript的LHS和RHS","text":"最近在看Kyle Simpson的 You Dont Know JS第一章作用域讲到了LHS和RHS。 JS引擎在作用域内查找一个变量的时候会有两种查询方式，LHS（Left-hand Side）查询和 RHS（Right-hand Side）查询。 如果为了对称美的话，可以这么解释： 当一个变量出现在赋值操作的左手边时，会进行 LHS 查询 当一个变量出现在赋值操作的右手边时，会进行 RHS 查询 但如果为了方便理解的话，我觉得这个解释差点味道，文中也说这个解释不是特别准确，特别是对RHS的解释，当涉及到代码的时候，在不理解这两个查询是什么意思是的情况下，容易让人摸不着头脑。 说一下我是怎么理解的： LHS查询，可以把它理解为 容器查询，什么意思呢，比如说 var a = 0 赋值语句。引擎执行到这段代码的时候需要查找a这个变量并把0赋值给它。这个查询不需要知道a的值是什么，只需要找到a就行（也就是所谓的容器）然后在容器中放入0 RHS查询，可以把它理解为 值查询，如果你理解了上面所说的LHS查询的话，那么这个就很好理解了。比如：console.log(a)，引擎在执行到这段代码的时候，需要通过RHS查询获取一下a的值，然后将它的值打印出来 补充在变量还没有被声明（在所有被查询的 作用域 中都没找到）的情况下，这两种类型的查询的行为不同。（这里我直接copy了原文）。 如果 RHS 查询在嵌套的 作用域 的任何地方都找不到一个值，这会导致 引擎 抛出一个 ReferenceError。必须要注意的是这个错误的类型是 ReferenceError。 相比之下，如果 引擎 在进行一个 LHS 查询，但到达了顶层（全局 作用域）都没有找到它，而且如果程序没有运行在“Strict模式”[^note-strictmode]下，那么这个全局 作用域 将会在 全局作用域中 创建一个同名的新变量，并把它交还给 引擎。 在 ES5 中被加入的“Strict模式”[^note-strictmode]，有许多与一般/宽松/懒惰模式不同的行为。其中之一就是不允许自动/隐含的全局变量创建。在这种情况下，将不会有全局 作用域 的变量交回给 LHS 查询，并且类似于 RHS 的情况, 引擎 将抛出一个 ReferenceError","link":"/2019/09/11/小知识点-我理解的javascript的LHS和RHS/"},{"title":"把敲代码过程中的琐碎操作交给肌肉记忆","text":"在敲代码的过程中，肯定会有不少琐碎的操作，这些操作或多或少占用着我们大脑的进程，但其实很多操作可以让我们的肌肉记忆去完成它。 比如在各个app之间来回切换，当打开的app超过3个以上之后，你的鼠标或者Tab键可能就忙不过来了，并且切换之前你还得先找到对应的app。 这篇文章分享一下我是怎么把切换app的操作交给肌肉记忆的，用到了下面两个App（macOS） Karabiner-Elements，用于改键（这名字有点长，不知作者是不是俄罗斯人，本文为了省力下面都用KE代指） Thor,用于给其他APP绑定快捷键 首先是KE。在说用法之前，我想说一下我改键的动机，除了我刚才说的原因之外，还有一个原因，不知道你的键盘是否和我一样，键盘左边的Command已经被磨的油光满面，而右边那个却和新买来的一样。同样叫command，凭啥左边的天天干活，右边的天天摸鱼，it’s not fair！为了和平公正，是时候让右边的摸鱼仔动起来了。 言归正传，下面，我以把右commnad改为F19超级键（hyper key）为例，说一下改键流程。 首先安装一下app,可以通过官网，或者homebrew1brew install karabiner-elements 安装完毕后打开这个网站。 可以看到这里列出了很多的改键预设，你可以找一个你喜欢的，或者差不多的点击import，这里选择Change caps_lock key(rev4)。如果你已经安装好了KE，点击后会自动提示是否打开KE，点击打开。 打开后，点击import.接着会进入这个界面，随便选一个enable就成，反正最终都是要改的。操作完之后，复杂改键（complex modifications）Tab栏下的Rules就会多一条。 这里默认把caps_lock改了，caps_lock切换大小写，工作量还行，我们不改它，需要换成右边的command。 接下来打开下面这个文件。1~/.config/karabiner/karabiner.json 这个文件是KE的配置文件，其实上面的一系列操作的结果最终会写入这个配置文件中。注意到很长的那个description了吗，就是我们刚才操作的结果。你可以按照上面的步骤多引入几个看一看，看完然后差不多就明白配置文件的语法了。这里按照我们的要求，只要把caps_lock改为right_command即可。(F19叫做超级键（hyper key）是command+shift+option+control键的组合)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&#123; \"global\": &#123; \"check_for_updates_on_startup\": true, \"show_in_menu_bar\": true, \"show_profile_name_in_menu_bar\": false &#125;, \"profiles\": [ &#123; \"complex_modifications\": &#123; \"parameters\": &#123; \"basic.simultaneous_threshold_milliseconds\": 50, \"basic.to_delayed_action_delay_milliseconds\": 500, \"basic.to_if_alone_timeout_milliseconds\": 1000, \"basic.to_if_held_down_threshold_milliseconds\": 500 &#125;, \"rules\": [ &#123; \"description\": \"Change caps_lock key to command+control+option+shift. (Post f19 key when pressed alone)\", \"manipulators\": [ &#123; \"from\": &#123; \"key_code\": \"caps_lock\", // 改为right_command \"modifiers\": &#123; \"optional\": [ \"any\" ] &#125; &#125;, \"to\": [ &#123; \"key_code\": \"left_shift\", \"modifiers\": [ \"left_command\", \"left_control\", \"left_option\" ] &#125; ], \"to_if_alone\": [ &#123; \"key_code\": \"f19\" &#125; ], \"type\": \"basic\" &#125; ] &#125; ] &#125;, \"devices\": [], \"name\": \"Default profile\", \"selected\": true, \"simple_modifications\": [], \"virtual_hid_keyboard\": &#123; \"country_code\": 0 &#125; &#125; ]&#125; 改完左command，接下来就可以依样画葫芦，改右option，右shift，甚至左option，这些都是阻碍公平的摸鱼老油条，如果你也看不惯，那就通通改掉。 到这里改键就完成了。之后就是分配工作，这就看你的需求了，比如我把右command给了Alfred。绑定完之后就可以愉快地敲击右command键了。 不过有个问题，不是所有app都如Alfred一样，提供了设置快捷键激活窗口的功能。这就需要用到另一个app协助了 - Thor。 这个使用起来很简单。选择app，然后绑定按键，绑定后的app就能通过快捷键启动、快捷键激活窗口。 改的过程中你可能又会遇到一个问题，提供快捷键激活功能的软件或者Thor，都不能直接绑定option这类的修饰类按键（必须要和其他非修饰类键组合）。解决方法就是Thor + KE配合，也就是本文的例子右command的改法（one-to-many）。 我基本上为我常用的app都加上了快捷键，大概十来个左右，都是工作过程中因为某些操作不顺手而慢慢加上的，所以并没有什么记快捷键的成本。一旦改键+绑定工作完成，并且配置的快捷键也形成肌肉记忆，敲代码的时候，就可以随心所欲地在各个App之间来回切换了。 想启动项目？ 快捷键打开终端；想敲代码？ 快捷键打开vscode；想调试？ 快捷键打开Chrome；想和产品撕逼？ 快捷键打开钉钉；想查单词？ 快捷键打开词典；想切换音乐？ 快捷键打开播放器；想和基友扯淡？ 快捷键打开微信；老板来了？ 快捷键激活vscode；一切都是那么顺其自然","link":"/2019/10/18/把敲代码过程中的琐碎操作交给肌肉记忆/"},{"title":"解决服务器ip被封ssh无法连接服务器的问题","text":"国庆节前几个礼拜的某天，我便宜又好用的搬瓦工服务器到期了，虽然它已经不是我的翻墙主力，但实在舍不得它便宜的价格，就续费了。谁知当天晚上ip就被封了，ping不通，ssh也连接不上，只能眼巴巴地看着它在大洋彼岸 Running 。。。很难受 为了不让它白跑，我开始在网上搜寻解决方式。起码得让我能登录吧。。。 TL;DR1ssh root@你的服务器地址 -o \"ProxyCommand=nc -X 5 -x 127.0.0.1:7891 %h %p\" or 123# .ssh/config 文件Host 你的服务器host 或者 * ProxyCommand=nc -X 5 -x 127.0.0.1:7891 %h %p 解决过程首先尝试了为使用socks5为终端开启代理的方法，我用的是mac，只要在终端输入一串export的命令即可，一般代理软件都会带，直接复制到终端中就成。 123export https_proxy=http://127.0.0.1:7890;export http_proxy=http://127.0.0.1:7890;export all_proxy=socks5://127.0.0.1:7891 经过上面的操作，确实在终端能通过代理访问google什么，ip地址也变成国外的了。但是，尝试了一下ping，和ssh。发现还是不行。为了找到问题的所在，我尝试用wireshark抓了一下包。 这张是ping我那台服务器的时候抓到的包，发现全是协议部分ICMP。同样下面一张图是我尝试用ssh去登录我的服务器的时候抓到的包,协议部分全是TCP。 是的，上面输入的命令并没有对这两个协议的连接生效。 网上搜索了相关的问题，得出的结论是GFW对连接进行了TCP阻断，ICMP阻断，我对网络这块不是非常熟，有空去研究一下，进一步分享。这里只说一下当前问题的解决方式。 对于TCP阻断，如果只想进行ssh登陆的话，解决方法很简单。(端口为你的ss代理端口，我的是7891)1ssh root@你的服务器地址 -o &quot;ProxyCommand=nc -X 5 -x 127.0.0.1:7891 %h %p&quot; 也可在.ssh/config文件上加上12Host 你的服务器host 或者 * ProxyCommand=nc -X 5 -x 127.0.0.1:7891 %h %p 这样每次登录服务器只要输入正常的ssh命令就行了，系统自动会给你做代理。（输入ssh命令之后看到服务器回应让你输入密码的时候，竟然有种脱缰的野马又回到自己身边的感觉） 至于如果想要扶墙的话，也有解决方式（V2ray、KCPTun），这里我没有做尝试，如果实在到了无梯可用的时候我可能会怼一下。 最后，希望大家，爱国守法，合理上网。 参考资料 mac ssh 通过代理链接服务器 ssh over socks5：通过socks5 proxy来连接ssh服务器 set http/socks/ssh proxy environment variables 关于目前 GFW(墙) 的封锁方式TCP封锁(阻断)猜想","link":"/2019/09/26/解决服务器ip被封ssh无法连接服务器的问题理/"}],"tags":[{"name":"效率","slug":"效率","link":"/tags/效率/"},{"name":"Mac使用技巧","slug":"Mac使用技巧","link":"/tags/Mac使用技巧/"},{"name":"终端","slug":"终端","link":"/tags/终端/"},{"name":"Javascript","slug":"Javascript","link":"/tags/Javascript/"},{"name":"小知识点","slug":"小知识点","link":"/tags/小知识点/"},{"name":"科学上网","slug":"科学上网","link":"/tags/科学上网/"},{"name":"网络","slug":"网络","link":"/tags/网络/"}],"categories":[]}