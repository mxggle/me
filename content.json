{"pages":[{"title":"","text":"我是个前端 技术栈基础Javascript, TypeScript, Node, MongoDb, MySql框架React, Vue, Nest, TypeORM其他Docker, Nginx, Vim 可以关注一下我的Twitter 喜欢摄影，入了尼康坑可以关注一下我的Instagram 练习吉他中 程序员也需要带点文艺气息 喜欢看美剧权力的游戏 Game Of Trones 绝命律师 Better call saul 怪奇物语 Stranger Things 越狱 Prison Break 迷失 Lost 绝命毒师 Break Bad 无耻之徒 Shameless 哥谭镇 Gotham 纸钞屋 Money Heist（好吧它是西剧） 当然还有 硅谷 Silicon Valley 关于博客就是记录一下自己学到的，想分享的东西。我想知道十年后我打开自己的博客网站，看自己的文字，会觉得自己的现在是什么样的一个人？处于一个什么样的阶段？行业技术处于什么样的阶段？还能否听懂我所分享的东西？","link":"/about/index.html"}],"posts":[{"title":"我的终端快捷命令配置技巧","text":"这篇文章和把敲代码过程中的琐碎操作交给肌肉记忆这篇文章类似，分享一下我提高效率的技巧。 我用的终端app是iTerm2，如果你是程序员，并且用的是Mac，那么iTerm2应该都了解过。这里就不介绍它了。iTerm2的配置文件路径（其他终端自己找对应配置文件）1~/.zshrc 我常用的快捷命令配置主要是两种： alias 脚本函数 我的alias配置如下 1234567891011121314151617181920 # 快捷命令alias cls='clear'alias ll='ls -l'alias la='ls -a'alias vi='vim'alias dma='docker-machine'alias py='python3'alias rn='react-native'alias rna='react-native run-android'alias gitcgmuggle='git config --local user.name muggle &amp;&amp; git config --local user.email muggle6594@gmail.com'# App安装开关任何涞源alias anywhereon='sudo spctl --master-disable'alias anywhereoff='sudo spctl --master-enable'# 快捷进入目录alias pj='cd ~/Work/projects'alias rt='cd ~/Work/test/react'alias blog='cd ~/Work/projects/myblog'# serversalias vps='/Users/szy/myshells/myvps.sh' 上面的vpsalias是我原来用来科学上网的服务器，这里我是引入了外部的脚本文件: 12345678910111213 #!/usr/bin/expect -fset user rootset host **.**.**.**set port ***set password **************set timeout -1spawn ssh $user@$host -p $portexpect \"*password:*\"send \"$password\\r\"interactexpect eof 我的脚本函数配置如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546# 关闭终端代理function proxyoff()&#123; unset http_proxy unset https_proxy unset all_proxy curl ip.gs echo -e \"已关闭代理\"&#125;# 开启终端代理function proxyon() &#123; export https_proxy=http://127.0.0.1:7890; export http_proxy=http://127.0.0.1:7890; export all_proxy=socks5://127.0.0.1:7891 env | grep -i proxy curl ip.gs echo -e \"已开启代理\"&#125;# 开启端口转发function ptfon()&#123; echo \" rdr pass inet proto tcp from any to any port 80 -&gt; 127.0.0.1 port $1\" | sudo pfctl -ef - if [ $? -ne 0 ] then echo \"端口未转发\" else echo \"👉 已将 $1 端口转发至 80\" fi &#125;# 关闭端口转发function ptfoff()&#123; sudo pfctl -F all -f /etc/pf.conf portf_list echo \"👉 已取消端口转发\"&#125;function ptfls()&#123; sudo pfctl -s nat&#125;function rni()&#123; # xcrun simctl list devices if \"$1\" then react-native run-ios --simulator 'iPhone 7 Plus' else react-native run-ios fi&#125; 我上面的一些配置都是我经常使用的一些。脚本函数那一块，存在错误和不完善的地方，等之后遇到新的痛点了统一修复吧。虽然快捷命令啥的用起来很爽，但是我在配置快捷命令的时候还是一个原则的即偷可以偷的懒, 作为一个程序员，很多命令肯定需要熟记在心的，不能有了这个偷懒的方法，就把所有的命令都给配置成了快捷命令，可能配置完后用的时候爽了，但如果换了台电脑。。。或者某一天公司服务器服务突然崩了，你连接上服务器才发现自己只会打快捷命令。。。。 最后，如果你其他快捷配置，或者其他玩法，请务必分享给我。","link":"/2019/10/19/我的终端快捷命令配置技巧/"},{"title":"把敲代码过程中的琐碎操作交给肌肉记忆","text":"在敲代码的过程中，肯定会有不少琐碎的操作，这些操作或多或少占用着我们大脑的进程，但其实很多操作可以让我们的肌肉记忆去完成它。 比如在各个应用之间来回切换，当打开的应用超过3个以上之后，鼠标或者Tab键可能就忙不过来了，关键切换之前还得先找到对应的应用（换句话说就是在切换应用的时候额外占用了眼睛的进程） 这篇文章分享一下我是怎么把切换应用的操作交给肌肉记忆的，用到了下面两个App（macOS） Karabiner-Elements（这名字有点长，不知作者是不是俄罗斯人，本文为了省力下面都用KE代指） Thor（这哥们的名字就很简洁） 首先是KE，这是一个MacOs下强大的改键应用。有人可能会有疑问，我又不外接键盘，用得着改键吗？我的回答是：用得着。外接键盘改键一部分原因是以前的习惯导致需要把一些键映射成其他键（比如ctrl和fn）但是我这里所说的改键除了改这个以外，还会改一些基本用不到的键。比如键盘中的右command,右option。这些键从电脑的入手到用废弃，基本按不了几下，按不了几下也就忍了，关键它们占据了键盘中非常好的位置，这就有点占着茅坑不拉屎的意味了，所以为啥不改了它呢？下面，我以把右commnad改为F19为例，说一下改键流程(F19叫做超级键hyper key是command+shift+option+control键的组合)。 首先安装一下app,可以通过官网，或者homebrew1brew install karabiner-elements 安装完毕后打开这个网站。 可以看到这里列出了很多的改键预设，你可以找一个你喜欢的，或者差不多的点击import，这里选择Change caps_lock key(rev4)。如果你已经安装好了KE，点击后会自动提示是否打开KE，点击打开。 打开后，点击import.接着会进入这个界面，随便选一个enable就成，反正最终都是要改的。操作完之后，复杂改键（complex modifications）Tab栏下的Rules就会多一条。 这里默认把caps_lock改了，其实也挺好的。caps_lock比较容易够到，所以非常适合配合其他键来实现组合键，但是毕竟本身用来切换大小写，不太好单独当作一个自定义功能键使用（KE中可以配置改键在单独按下还是和其它键组合的时候生效）。接下来讲一下怎么把这个键改成右command。 打开下面这个文件。1~/.config/karabiner/karabiner.json 这个文件是KE的配置文件，其实上面的一系列操作的结果最终会写入这个配置文件中。注意到很长的那个description了吗，就是我们刚才操作的结果。你可以按照上面的步骤多引入几个看一看，看完然后差不多就明白配置文件的语法了。这里按照我们的要求，只要把caps_lock改为right_command即可。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&#123; \"global\": &#123; \"check_for_updates_on_startup\": true, \"show_in_menu_bar\": true, \"show_profile_name_in_menu_bar\": false &#125;, \"profiles\": [ &#123; \"complex_modifications\": &#123; \"parameters\": &#123; \"basic.simultaneous_threshold_milliseconds\": 50, \"basic.to_delayed_action_delay_milliseconds\": 500, \"basic.to_if_alone_timeout_milliseconds\": 1000, \"basic.to_if_held_down_threshold_milliseconds\": 500 &#125;, \"rules\": [ &#123; \"description\": \"Change caps_lock key to command+control+option+shift. (Post f19 key when pressed alone)\", \"manipulators\": [ &#123; \"from\": &#123; \"key_code\": \"caps_lock\", // 改为right_command \"modifiers\": &#123; \"optional\": [ \"any\" ] &#125; &#125;, \"to\": [ &#123; \"key_code\": \"left_shift\", \"modifiers\": [ \"left_command\", \"left_control\", \"left_option\" ] &#125; ], \"to_if_alone\": [ &#123; \"key_code\": \"f19\" &#125; ], \"type\": \"basic\" &#125; ] &#125; ] &#125;, \"devices\": [], \"name\": \"Default profile\", \"selected\": true, \"simple_modifications\": [], \"virtual_hid_keyboard\": &#123; \"country_code\": 0 &#125; &#125; ]&#125; 改完左command，接下来就可以依样画葫芦，改右option，右shift，甚至左option。 到这里改键就完成了。之后就是给你改好的键分配命令了，这就看你的需求了，比如我把右command给了Alfred。绑定完之后就可以愉快地敲击右command键激活Alfred搜索了。 不过有个问题，不是所有app都如Alfred一样，提供了设置快捷键激活窗口的功能。这就需要用到另一个app协助了 - Thor。 这个使用起来很简单。选择app，然后绑定按键，绑定后的app就能通过快捷键启动、快捷键激活窗口。 改的过程中你可能又会遇到一个问题，提供快捷键激活功能的软件或者Thor，都不能直接绑定option这类的修饰类按键（必须要和其他非修饰类键组合）。解决方法就是Thor + KE配合，也就是本文的例子右command的改法（one-to-many）。 我基本上为我常用的app都加上了快捷键，大概十来个左右，都是工作过程中因为某些操作不顺手而慢慢加上的，所以并没有什么记快捷键的成本。一旦改键+绑定工作完成，并且配置的快捷键也形成肌肉记忆，敲代码的时候，就可以随心所欲地在各个App之间来回切换了。换句话说你大脑的一个指令，通过快捷键辅助可以直接下达到手指，不用再麻烦大脑其他部位了。","link":"/2019/10/18/把敲代码过程中的琐碎操作交给肌肉记忆/"},{"title":"两周的Vim使用感受","text":"先列一下我在使用Vim前对于它的刻板印象 命令很多, 使用vim, 需要记忆大量的命令 现在像VSCode, webStrom 这些编辑器, IDE 生态非常丰富, 使用Vim 有点”old school”, 自动补全定义跳转这些功能搞起来也没前者方便 我平时喜欢逛逛油管, 在上面总能看到一些大佬撸代码的视频, 或者敲代码的crash course . 关注的几个博主比如大名鼎鼎、破解iPhone手机的George Hotz, 软件顾问Ben Award 都还在使用vim. 在他们手里那个光标像个带了个跳刀的火猫在代码间穿梭自如. 我忍不住打开vim 敲了几下,MD我的光标简直像个小脑发育不全的智障. 羡慕之余, 我学起了Vim, 现在已经用了两个礼拜了, 基本离不开它了，很多命令已经熟记在心(其实两天就够了), 只差多练提速了 网上vim 命令大全一搜一大堆, 我这里就只记录一下常用的几个命令, 有了以下几个, 基本上就能非常愉快地使用vim了 教程开始模式 正常模式(Normal Mode) 大部分命令都在这个模式发出(按esc退出其他模式进入normal模式) 插入模式(Insert Mode) 可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。 可视模式(Visual Mode)：正常模式下按v可以进入可视模式， 在可视模式下，移动光标可以选择文本。按V进入可视行模式， 总是整行整行的选中。ctrl+v进入可视块模式. 替换模式(Replace Mode)：正常模式下，按R进入。 命令模式(Command Mode): 可输入多种命令, 比如全局搜索, 正则替换等, 在正常模式输入:进入 上下左右移动,没使用vim之前总觉得vim为啥需要把移动按键放在这个位置, 也没有具体的意思, 用多了才知道,这个位置可比键盘上的上下左右舒服多了.现在我没事就喜欢JKJKJK地敲 h 左 j 上 k 下 l 右 单词移动通过下面三个命令, 在单词与单词之间移动起来就非常畅通无阻了 w 光标移动到下一个单词的词首 b 向前移动光标，移动到前一个单词的词首 e 光标移动到下一个单词的词尾 块移动通过以下几个命令, 光标就学会长距离的闪现了 0 移动到本行第一个字符上 ^ 移动到本行第一个非空白字符(或者结合0 和 w) $ 移动到行尾 G 移动到文件末尾行 gg 移动到文件首行 ) 光标移动到下一句 ( 光标移动到上一句 { 向上移动一个段落 } 向下移动一个段落 复杂移动通过下面的命令, 光标就学会了精确的传送,想去哪去哪 f[字符]: 把光标移到同一行的指定字符处 t[字符]: 把光标移到同一行的下一个c字符前 插入命令 i 在当前位置前插入 I 在当前行首插入 a 在当前位置后插入 A 在当前行尾插入 o 在当前行之后插入一行 O 在当前行之前插入一行 删除 dd 删除当前行 D 删除当前字符至行尾。D=d$ [n]x 删除光标起1(n)个字符 d[n]w 删除光标起1(n)个词 改写 c[n]w 改写光标后1(n)个词。 c[n]l 改写光标后n个字母。 r 替换光标处的字符 R 进入替换模式，按esc回到正常模式。 撤销与重做 [n]u 取消1(n)个改动。 ctrl + r 重做最后的改动(和 u 相反) U 取消当前行中所有的改动。 注意到上面的d[n]w 和c[n]w, 会发现其实是用删除命令d 结合了 移动命令中的 w, vim 中还有很多类似的结合(比如dfc), 包括命令的大小写区分, 可以在敲代码的时候亲自尝试一下, 用一次就记住了, 基本没有什么记忆成本. 复制粘贴 y: 复制在可视模式下选中的文本(或者结合之前所get到的规律, 试试 yw) yy: 复制整行(可以结合数字 2yy就是复制两行) p : 粘贴之前所复制(y) 的内容 我现在习惯于 行选择模式V + 移动命令 + y 复制大段大段的文字. 好了, 其实说完复制粘贴就够了, 懂得都懂。 将Vim视作工具使用vim和现在的各种IDE并不互斥,开发过程中完全可以两者结合一起使用, 把Vim当作一个提高你编码效率的工具 结合的方式很简单, 如果是VScode 安装Vim插件即可, 类似Webstorm,Idea 这些可以安装IdeaVim. 作为中国程序员, 推荐安装 IdeaVimIdeaExtension(WebStorm)插件, 这样在切换成normal模式时, 它会自动帮你将输入法更改为英文输入法, 从而避免中文输入法的干扰 (切换回插入模式时也会自动将输入法改回之前设定) 最后分享两点感受 像Vim 这些东西,只不过是工具而已, 只要能提高效率和体验, 怎么用见仁见智, 不要为Vim而Vim 学习是个积累的过程, 避免一口吃成胖子的心态, 像Vim, 刚开始可能只能记住简单的几个命令, 但在coding过程中, 只要不断地使用, 所掌握的命令肯定会越来越多, 也会越来越熟练(我就在这么积累中) 参考内容Vim Cheat Sheet Vim Editor Modes Explained The VIM Tutor 史上最全的Vim命令","link":"/2020/12/20/两周的Vim使用感受/"}],"tags":[{"name":"效率","slug":"效率","link":"/tags/效率/"},{"name":"Mac使用技巧","slug":"Mac使用技巧","link":"/tags/Mac使用技巧/"},{"name":"终端","slug":"终端","link":"/tags/终端/"}],"categories":[]}